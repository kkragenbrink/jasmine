#!/bin/bash

NODE_ENV="production"
NODE=$(which node)
PID_FILE="./jasmine.pid"
SERVER="./src/jasmine.js"
ACTION="abort"

if [ -e "${PID_FILE}" ]; then
    PID=$(cat "${PID_FILE}")
fi

for i in $*; do
    case $i in
        --develop|-D)
            NODE_ENV="development"
            ;;
        --help|-?)
            echo "Usage: ./jasmine [options] (start)"
            echo "       ./jasmine (stop|restart|reload|status)"
            echo " "
            echo "Options:"
            echo "  -D, --develop           print debug messages to the console"
            echo "  -?, --help              print this help message"
            exit
            ;;
        start|stop|reload|restart|status)
            ACTION="$i"
            ;;

    esac
done

function check_status {
        if [ -e "${PID_FILE}" ]; then
            OUTPUT=$(ps aux | grep ${PID} | grep -v grep)
            if [ "${#OUTPUT}" -gt 0 ] ; then
                echo 0
            else
                echo 1
            fi
        else
            echo 2
        fi
}

case "$ACTION" in
    "start")
        if [ -e "${PID_FILE}" ]; then
            echo "jasmine is already running."
        else
            NODE_ENV=${NODE_ENV} "${NODE}" ${SERVER}&
            PID=$!
            echo ${PID} > "${PID_FILE}"
        fi
        ;;

    "stop")
        kill -TERM ${PID}
        ;;

    "reload")
        kill -HUP ${PID}
        ;;

    "restart")
        ./jasmine stop
        ./jasmine start $*
        ;;

    "status")
        STATUS=$(check_status)
        case "${STATUS}" in
            0)
                echo "jasmine is running."
                ;;

            [1-2])
                echo "jasmine is not running."

                if [ -e ${PID_FILE} ]; then
                    rm ${PID_FILE}
                fi
                ;;
        esac
        ;;

    *)
        echo "Usage: ./jasmine (start|stop|restart|reset|status)"
        ;;
esac
